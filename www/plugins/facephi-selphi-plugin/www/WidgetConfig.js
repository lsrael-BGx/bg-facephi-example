cordova.define("facephi-selphi-plugin.WidgetConfig", function(require, exports, module) {
/**
     * Modifies the Widget configuration.
     * @param Boolean debug         enables or disables the Widget debug options.
     * @param Boolean crop          if this value is true then returns the images cropped with cropPercent (percentage) value
     * @param Double  cropPercent   Indicates the percentages of cropping of the result images.
     * @param Double  sceneTimeout  Optional timeout in the Widget screens in seconds. If 0 then this timeout is disabled.
     */
    WidgetConfig = function () {
        this.debug = false;
		this.jpgQuality = 0.8;
        this.crop = false;
        this.cropPercent = 1.0;
        this.sceneTimeout = 0.0;
        this.enableImages = false;
        this.qrValidatorExpression = null;
		this.fullscreen = true;
		this.livenessMode = "BLINK";
		this.locale = null;
		this.uTags = null;
        this.frontalCameraPreferred = true;
        this.templateRawOptimized = true;
        this.stabilizationMode = false;
    }
	
	
	/**
    * Sets if the widget is fullscreen or not.
    */
    WidgetConfig.prototype.setEnableFullscreen = function (isFullscreen) {
        checkType(isFullscreen, ['boolean']);
        this.fullscreen = isFullscreen;
    }
	
	/**
    * Sets if the blink detection is enabled or not.
    */
    WidgetConfig.prototype.setLivenessMode = function (livenessMode) {
		if(livenessMode !=  null)
			this.livenessMode = livenessMode;
    }


    /**
    * Sets if the widget uses the frontal camera (true) or the back camera (false) if it is possible.
    */
    WidgetConfig.prototype.setFrontalCameraPreferred = function (isFrontalCameraPreferred) {
        checkType(isFrontalCameraPreferred, ['boolean']);
        this.frontalCameraPreferred = isFrontalCameraPreferred;
    }

    /**
    * Sets if the templateRaw is optimized or not.
    */
   WidgetConfig.prototype.setTemplateRawOptimized = function (templateRawOptimized) {
        checkType(templateRawOptimized, ['boolean']);
        this.templateRawOptimized = templateRawOptimized;
    }

     /**
    * Sets if the authentication must stabilize before the capturing process.
    */
   WidgetConfig.prototype.setStabilizationMode = function (stabilizationMode) {
    checkType(stabilizationMode, ['boolean']);
    this.stabilizationMode = stabilizationMode;
}

/**
    * Sets 4 bytes with data that can be configured by the main application and that will be included in the templates generated by the widget.
    */
    WidgetConfig.prototype.setJPGQuality = function (JPGQuality) {
		checkType(JPGQuality, ['number']);
        this.jpgQuality = JPGQuality;
    }

    /**
    * Sets 4 bytes with data that can be configured by the main application and that will be included in the templates generated by the widget.
    */
    WidgetConfig.prototype.setUserTags = function (userTags) {
		if(userTags.length != 4)
			this.uTags = null;
		else
			this.uTags = binArrayToJson(userTags);
    }

    /**
        * Sets header info for the user.
        */
        WidgetConfig.prototype.setEnableLiveness = function (enableLiveness) {
            checkType(enableLiveness, ['boolean']);
            this.enableLiveness = enableLiveness;
        }
	
	/**
    * Sets if the widget is fullscreen or not.
    */
    WidgetConfig.prototype.setLocale = function (locale) {
        this.locale = locale;
    }

   /**
    * Gets if user control process images are enabled or not
    *
    * @property getEnableImages
    * @type   Boolean
    * @default false
    */
    WidgetConfig.prototype.getEnableImages = function () {
        return this.enableImages;
    }

  /**
   * Gets if debug mode is enabled or not
   *
   * @property getDebug
   * @type   Boolean
   * @default false
   */
    WidgetConfig.prototype.getDebug = function () {
        return this.debug;
    }
	
	/**
   * Gets if the WritePermissions screen is launched -if false, then the brightness won't change during the widget process-.
   *
   * @property getEnableWritePermissions
   * @type   Boolean
   * @default false
   */
    WidgetConfig.prototype.getEnableWritePermissions = function () {
        return this.enableWritePermissions;
    }

  /**
   * Gets if the return images must be cropped or not
   *
   * @property getCrop
   * @type   Boolean
   * @default false
   */
    WidgetConfig.prototype.getCrop = function () {
        return this.crop;
    }

   /**
    * Gets the crop percentage of the image
    *
    * @property getCropPercent
    * @type   Double
    * @default 1.0
    */
    WidgetConfig.prototype.getCropPercent = function () {
        return this.cropPercent;
    }

   /**
    * Gets the timeout in the WidgetConfig screens in seconds. If 0 then this timeout is disabled.
    *
    * @property getSceneTimeout
    * @type   Double
    * @default 0.0
    */
    WidgetConfig.prototype.getSceneTimeout = function () {
        return this.sceneTimeout;
    }

   /**
    * Gets if the plugin must return a sample extraction image.
    *
    * @property setEnableImages
    * @type   Boolean
    * @default false
    */
    WidgetConfig.prototype.setEnableImages = function (_enableImages) {
        checkType(_enableImages, ['boolean']);
        this.enableImages = _enableImages;
    }


   /**
    * Sets if the WritePermissions screen is launched -if false, then the brightness won't change during the widget process-.
    *
    * @property setEnableWritePermissions
    * @type   Boolean
    * @default true
    */
    WidgetConfig.prototype.setEnableWritePermissions  = function (_enableWritePermissions ) {
        checkType(_enableWritePermissions , ['boolean']);
        this.enableWritePermissions  = _enableWritePermissions ;
    }
	
	/**
    * Sets the debug mode enabled or disabled
    *
    * @property setDebug
    * @type   Boolean
    * @default false
    */
    WidgetConfig.prototype.setDebug = function (_debug) {
        checkType(_debug, ['boolean']);
        this.debug = _debug;
    }
	
	
   /**
    * Sets if the image face must be cropped
    *
    * @property setCrops
    * @type   Boolean
    * @default false
    */
    WidgetConfig.prototype.setCrop = function (_crop) {
        checkType(_crop, ['boolean']);
        this.crop = _crop;
    }

   /**
    * Sets the crop percentage
    *
    * @property setCropPercent
    * @type   Double
    * @default 1.0
    */
    WidgetConfig.prototype.setCropPercent = function (_cropPercent) {
        checkType(_cropPercent, ['number']);
        this.cropPercent = _cropPercent;
    }

   /**
    * Sets the user control screens timeout
    *
    * @property setSceneTimeout
    * @type   Double
    * @default 0.0
    */
    WidgetConfig.prototype.setSceneTimeout = function (_sceneTimeout) {
        checkType(_sceneTimeout, ['number']);
        this.sceneTimeout = _sceneTimeout;
    }



   /** 
    * Returns params in JSON string format
    *
    * @method toString 
    * @return String Widget params JSON structure in string format 
    */
    WidgetConfig.prototype.toString = function () {
        this.qrValidatorExpression = null;
		this.fullscreen = true;
		this.enableLiveness = false;
		this.locale = null;
        var output =
               [{ "debug": +String(this.debug) },
			   {  "enableWritePermissions": +String(this.enableWritePermissions) },
                { "crop": +String(this.crop) },
                { "cropPercent": +String(this.cropPercent) },
                { "sceneTimeout": +String(this.sceneTimeout) },
                { "enableImages": +String(this.enableImages) },
				{ "jpgQuality": +String(this.jpgQuality) },
                { "fullscreen": +String(this.fullscreen) },
                { "templateRawOptimized": +String(this.templateRawOptimized) },
                { "stabilizationMode": +String(this.stabilizationMode) },
				{ "enableLiveness": +String(this.enableLiveness) },
				{ "qrValidatorExpression": +String(this.qrValidatorExpression) },
				{ "locale": +String(this.locale)},
				{ "isCameraFrontal": +String(this.frontalCameraPreferred) },
				{ "userTags": +(this.uTags) }]

        return JSON.stringify(output);
    }


   
    function typeOf(obj) {
        return {}.toString.call(obj).match(/\s(\w+)/)[1].toLowerCase();
    }


    var binArrayToJson = function(binArray)
	{
		var decoder = new TextDecoder('utf8');
		return btoa(decoder.decode(binArray));
	}



   /** 
    * Checks if the param type is correct
    *
    * @method checkType 
    * @throws TypeError Throws a type error exception if the type is not correct.
    */
    function checkType(args, types) {
        // args = [].slice.call(args);
        for (var i = 0; i < types.length; ++i) {
            if (typeOf(args) != types[i]) {
                throw new TypeError('param ' + i + ' must be of type ' + types[i]);
            }
        }
    }


    module.exports.WidgetConfig = WidgetConfig;
});
